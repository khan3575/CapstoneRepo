#!/bin/bash
# BraTS GNN Segmentation - Easy Installation Script
# This script sets up the complete environment for running the BraTS GNN system

echo "üöÄ BraTS GNN Segmentation - Installation Script"
echo "================================================"

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Check Python version
echo "üêç Checking Python installation..."
if command_exists python3; then
    PYTHON_VERSION=$(python3 --version 2>&1 | awk '{print $2}')
    echo "‚úÖ Python $PYTHON_VERSION found"
    
    # Check if Python version is 3.8 or higher
    PYTHON_MAJOR=$(echo $PYTHON_VERSION | cut -d. -f1)
    PYTHON_MINOR=$(echo $PYTHON_VERSION | cut -d. -f2)
    
    if [ "$PYTHON_MAJOR" -eq 3 ] && [ "$PYTHON_MINOR" -ge 8 ]; then
        echo "‚úÖ Python version is compatible (3.8+)"
    else
        echo "‚ùå Python 3.8+ required. Current version: $PYTHON_VERSION"
        exit 1
    fi
else
    echo "‚ùå Python3 not found. Please install Python 3.8 or higher."
    exit 1
fi

# Check pip
echo "üì¶ Checking pip installation..."
if command_exists pip3; then
    echo "‚úÖ pip3 found"
    PIP_CMD="pip3"
elif command_exists pip; then
    echo "‚úÖ pip found"
    PIP_CMD="pip"
else
    echo "‚ùå pip not found. Please install pip."
    exit 1
fi

# Create virtual environment (recommended)
echo "üîß Setting up virtual environment..."
read -p "Do you want to create a virtual environment? (recommended) [y/N]: " create_venv

if [[ $create_venv =~ ^[Yy]$ ]]; then
    if [ ! -d "venv" ]; then
        echo "Creating virtual environment..."
        python3 -m venv venv
    fi
    
    echo "Activating virtual environment..."
    source venv/bin/activate
    PIP_CMD="pip"
    echo "‚úÖ Virtual environment activated"
else
    echo "‚ö†Ô∏è  Installing globally (not recommended)"
fi

# Upgrade pip
echo "üì¶ Upgrading pip..."
$PIP_CMD install --upgrade pip

# Install PyTorch first (with CUDA support if available)
echo "üî• Installing PyTorch..."
if command_exists nvidia-smi; then
    echo "üéÆ NVIDIA GPU detected, installing PyTorch with CUDA support..."
    $PIP_CMD install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118
else
    echo "üíª No NVIDIA GPU detected, installing CPU-only PyTorch..."
    $PIP_CMD install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
fi

# Install PyTorch Geometric
echo "üåê Installing PyTorch Geometric..."
$PIP_CMD install torch-geometric

# Install remaining requirements
echo "üìö Installing all other dependencies..."
$PIP_CMD install -r requirements.txt

# Verify installation
echo "üîç Verifying installation..."
python3 -c "
import torch
import torch_geometric
import numpy as np
import nibabel as nib
import SimpleITK as sitk
import sklearn
import matplotlib.pyplot as plt
import pandas as pd
import scipy
import tqdm

print('‚úÖ All core dependencies successfully installed!')
print(f'PyTorch version: {torch.__version__}')
print(f'PyTorch Geometric version: {torch_geometric.__version__}')
print(f'CUDA available: {torch.cuda.is_available()}')
if torch.cuda.is_available():
    print(f'CUDA version: {torch.version.cuda}')
    print(f'GPU count: {torch.cuda.device_count()}')
"

if [ $? -eq 0 ]; then
    echo ""
    echo "üéâ INSTALLATION COMPLETED SUCCESSFULLY!"
    echo "================================================"
    echo ""
    echo "üìã Next Steps:"
    echo "1. Prepare your BraTS data in the ./data/ directory"
    echo "2. Run preprocessing: python src/preprocessing.py --input_dir /path/to/brats --output_dir ./data/preprocessed"
    echo "3. Run graph construction: python src/graph_construction.py --input_dir ./data/preprocessed --output_dir ./data/graphs"
    echo "4. Train the model: python src/train_maxpower.py"
    echo "5. Evaluate results: python run_comprehensive_evaluation.py"
    echo ""
    echo "üìñ For detailed instructions, see README.md"
    echo ""
    if [[ $create_venv =~ ^[Yy]$ ]]; then
        echo "üí° To activate the environment in future sessions:"
        echo "   source venv/bin/activate"
    fi
else
    echo "‚ùå Installation verification failed. Please check the error messages above."
    exit 1
fi